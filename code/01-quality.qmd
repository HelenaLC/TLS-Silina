# Quality

## Preamble

### Dependencies

```{r}
#| label: load-libs
library(edgeR)
library(scran)
library(scater)
library(ggplot2)
library(patchwork)
library(SingleCellExperiment)
```

### Loading

```{r}
#| label: load-data
p <- file.path("..", "data", "GeoMx")
y <- read.csv(
  file.path(p, "counts.csv"), 
  row.names = 1, check.names = FALSE)
rd <- read.csv(
  file.path(p, "rowmd.csv"), 
  row.names = 1, check.names = FALSE)
cd <- read.csv(
  file.path(p, "colmd.csv"), 
  row.names = 5, check.names = FALSE)
```

### Wrangling

```{r}
#| dependson: load-data
#| label: prep-data
# fix/simplify sample metadata
names(cd)[ncol(cd)] <- "LOQ"
names(cd) <- gsub("_ty", "_Ty", names(cd))
names(cd) <- gsub("_", "", names(cd))
cd$TissueSubtype <- gsub("TLSep", "TLSEp", cd$TissueSubtype)
# construct SCE
(sce <- SingleCellExperiment(
  list(counts = as.matrix(y)),
  rowData = rd, colData = cd))
```

## Filtering

```{r}
#| dependson: prep-data
#| label: filtering
# total positive/negative probe counts
is_np <- rowData(sce)$CodeClass == "Negative"
sce$neg <- colSums(counts(sce[ is_np, ]))
sce$pos <- colSums(counts(sce[!is_np, ]))
# drop negative probes & outliers
sce <- sce[!is_np,
    sce$neg < 500 &
    sce$RawReads >= 100 &
    sce$AOINucleiCount >= 5]
# test whether or not features lie above sample-specific LOQ
loq <- sweep(assay(sce), 2, sce$LOQ, `>`)
# keep samples with at least 3% of genes > LOQ
table(cs <- colMeans(loq) >= 0.03)
 # keep genes > LOQ in at least 10% of samples (by tumor type)
gs <- by(t(loq), sce$TumorType, \(.)
    colnames(.)[colMeans(.) >= 0.1])
sapply(gs, length)
gs <- unique(unlist(gs))
dim(sce <- sce[gs, cs])
# exclude LN & Ep tissue subtypes
rmv <- grepl("^LNmet", sce$TissueType, ignore.case = TRUE) |
    grepl("^TLSEp", sce$TissueSubtype, ignore.case = TRUE)
dim(sce <- sce[, !rmv])
# add broader subtypes
sce$TissueSub <- sce$TissueSubtype
sce$TissueSub[grep("^LN", sce$TissueType)] <- "LN"
sce$TissueSub[grep("^SFL_TLS", sce$TissueSubtype)] <- "SFL_TLS"
# reorder factors of interest
sce$TissueType <- factor(sce$TissueType, c(
    "TLS", "LN", "Alv", "Kid", "Tum"))
sce$TissueSub <- factor(sce$TissueSub, c(
    "E_TLS", "SFL_TLS", "PFL_TLS", "Tcell_TLS", 
    "LN", "Alveoles", "Kidney", "LSCC", "RCC"))
cd <- data.frame(colData(sce))
```

```{r}
#| dependson: filtering
#| label: plot-area
#| code-fold: true
#| fig-width: 7
#| fig-height: 3
ggplot(cd, aes(RawReads, AOINucleiCount, col = SlideName)) +
ggplot(cd, aes(AOISurfaceArea, AOINucleiCount, col = SlideName)) +
  plot_layout(guides = "collect") & 
  scale_x_log10() & scale_y_log10() &
  geom_point(shape = 16, alpha = 0.5) &
  guides(color = guide_legend(
      override.aes = list(size = 3, alpha = 1))) &
  theme_bw() & theme(aspect.ratio = 1, 
      panel.grid.minor = element_blank(),
      legend.key.size = unit(0.5, "lines")) 
```

```{r}
#| label: plot-reads
#| code-fold: true
#| warning: false
#| fig-width: 8
#| fig-height: 3
ggplot(cd, aes(RawReads, col = SlideName)) +
ggplot(cd, aes(RawReads, col = PatientID)) &
  geom_density(key_glyph = "point") & 
  guides(color = guide_legend(
      override.aes = list(size = 3, alpha = 1))) &
  scale_x_log10() & theme_bw() & theme(
    aspect.ratio = 1, 
    legend.justification = c(0, 0.5),
    legend.key.size = unit(0.5, "lines")) 
```

## Processing

### Normalization

```{r}
#| dependson: filtering
#| label: normalization
dgl <- calcNormFactors(sce)
y <- cpm.DGEList(dgl, log = FALSE)
z <- cpm.DGEList(dgl, log = TRUE )
assay(sce, "normcounts") <- y
assay(sce, "logcounts" ) <- z
```

### Selection

```{r}
#| dependson: normalization
#| label: selection
tbl <- modelGeneVar(sce, block = sce$PatientID)
rowData(sce)$hvg <- (hvg <- tbl$bio > 0)
```

### Reduction

```{r}
#| dependson: selection
#| label: reduction
sce <- runPCA(sce, subset_row = hvg)
dr <- reducedDim(sce)
cd <- data.frame(cd, dr)
```

## Visualization

### PVE

```{r}
#| dependson: normalization
#| label: plot-pve
#| code-fold: true
#| fig-width: 7
#| fig-height: 3
var <- c("AOINucleiCount", "AOISurfaceArea", "LOQ", "TumorType", 
    "TissueSub", "SlideName", "PatientID", "PatientCategory") 
(pve <- plotExplanatoryVariables(sce, variables = var))
```

### PCA

::: {.panel-tabset}

#### discrete

```{r}
#| dependson: reduction
#| label: plot-pca-disc
#| code-fold: true
#| fig-width: 9
#| fig-height: 4
ggplot(cd, aes(PC1, PC2, col = SlideName)) +
ggplot(cd, aes(PC1, PC2, col = TumorType)) +
ggplot(cd, aes(PC1, PC2, col = TissueType)) &
  geom_point(shape = 16, alpha = 0.5) &
  guides(color = guide_legend(
    ncol = 2, title.position = "top",
    override.aes = list(size = 3, alpha = 1))) &
  coord_equal() & theme_bw() & theme(
    legend.position = "bottom", 
    legend.justification = "top",
    legend.key.size = unit(0.5, "lines")) 
```

#### continuous

```{r}
#| dependson: reduction
#| label: plot-pca-condt
#| code-fold: true
#| fig-width: 9
#| fig-height: 4
ggplot(cd, aes(PC1, PC2, col = RawReads)) +
ggplot(cd, aes(PC1, PC2, col = AOISurfaceArea)) +
ggplot(cd, aes(PC1, PC2, col = AOINucleiCount)) &
  geom_point(shape = 16, alpha = 0.5) &
  scale_color_viridis_c(trans = "log10") &
  guides(color = guide_colorbar(title.position = "top")) &
  coord_equal() & theme_bw() & theme(
    legend.position = "bottom", 
    legend.justification = "top",
    legend.key.width = unit(2, "lines"),
    legend.key.height = unit(0.5, "lines"))
```

:::

### AOI counts

```{r}
#| dependson: filtering
#| label: plot-aoi
#| code-fold: true
#| fig-width: 7
#| fig-height: 3
for (. in c("TissueType", "TissueSub")) {
    ns <- table(PatientID = sce$PatientID, sce[[.]])
    ns <- as.data.frame(ns); names(ns)[2] <- .
    ns$TumorType <- sce$TumorType[match(ns$PatientID, sce$PatientID)]
    gg <- ggplot(ns, 
        aes(PatientID, Freq, fill = .data[[.]])) +
        geom_bar(stat = "identity", position = "stack") +
        scale_fill_brewer(palette = "Set1") +
        facet_grid(~TumorType, scales = "free_x") +
        labs(x = "Patient ID", y = "# AOIs") + 
        theme_bw() + theme(
            aspect.ratio = 1,
            panel.grid = element_blank(),
            legend.key.size = unit(0.5, "lines"),
            axis.text.x = element_text(angle = 30, hjust = 1))
    print(gg)
}
```

## Appendix

```{r}
#| label: save-data
saveRDS(sce, file.path("..", "outs", "01-sce.rds"))
```

::: {.callout-note icon=false, collapse=true}

### Session info

```{r}
#| label: session-info
#| code-fold: false
sessionInfo()
```

:::