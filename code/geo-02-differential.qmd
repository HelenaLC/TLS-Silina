# Differential

## Preamble

### Dependencies

```{r}
#| label: load-libs
library(edgeR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scuttle)
library(pheatmap)
library(patchwork)
library(ggbeeswarm)
library(EnhancedVolcano)
library(SingleCellExperiment)
```

### Loading

```{r}
#| label: load-data
sce <- readRDS(file.path("..", "outs", "01-sce.rds"))
```

### Utils

```{r}
#| label: volcano
#| code-fold: true
.volcano <- \(df, title, fdr = 0.05, lfc = 1) {
  EnhancedVolcano(df, 
    x = "logFC", y = "FDR",
    FCcutoff = lfc, pCutoff = fdr,
    pointSize = 1, raster = TRUE,
    title = title, subtitle = NULL,
    lab = df[["gene"]], labSize = 2, 
    drawConnectors = TRUE, widthConnectors = 0.5) +
  guides(col = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  theme_bw(9) + theme(
    aspect.ratio = 1,
    legend.title = element_blank(),
    panel.grid.minor = element_blank())
}
```

## Analysis

```{r}
#| label: subset
# exclude LN & TLSep from analysis
sub <- sce[, !sce$TissueSub %in% c("LN", "TLSep")]
df <- data.frame(colData(sub), t(logcounts(sub)), check.names = FALSE)
gg <- pivot_longer(df, any_of(rownames(sub)), names_to = "gene", values_to = "expr")
```

```{r}
#| label: models
# split by tumor type
dat <- list(
    RCC = sub[, sub$TumorType == "RCC"], 
    LSCC = sub[, sub$TumorType == "LSCC"])
ref <- c(RCC = "Kidney", LSCC = "Alveoles")
fit <- mapply(
    SIMPLIFY = FALSE,
    sce = dat, typ = names(dat), 
    \(sce, typ) {
        # setup design matrix
        df <- data.frame(colData(sce))
        st <- droplevels(df$TissueSub)
        df$TissueSub <- relevel(st, ref[typ])
        mm <- model.matrix(~0+TissueSub, df)
        colnames(mm) <- gsub("TissueSub", "", colnames(mm))
        # fit GLM model
        dgl <- DGEList(assay(sce))
        dgl <- calcNormFactors(dgl)
        dgl <- estimateDisp(dgl, mm)
        fit <- glmQLFit(dgl, mm)
    })
```

```{r}
#| label: constrasts
# setup contrasts
names(kid) <- kid <- c("Kidney", "RCC")
names(lun) <- lun <- c("Alveoles", "LSCC")
names(tls) <- tls <- c("E_TLS", "SFL_TLS", "PFL_TLS", "Tcell_TLS")
grp <- list(
    RCC = c(list(TLS = list(kid, tls)), lapply(tls, \(t) list(kid, t))),
    LSCC = c(list(TLS = list(lun, tls)), lapply(tls, \(t) list(lun, t))))
cs <- mapply(
    t = names(grp), g = grp,
    SIMPLIFY = FALSE, \(t, g) {
        lapply(g, \(c) {
            cs <- numeric(ncol(mm <- fit[[t]]$design))
            a <- match(c[[1]], colnames(mm))
            b <- match(c[[2]], colnames(mm))
            cs[a] <- -1/sum(ref != 0)
            cs[b] <- 1/sum(tls != 0)
            return(cs)
        })
    })
```

```{r}
#| label: testing
# run DGE analysis
names(typ) <- typ <- names(grp)
res <- lapply(typ, \(t) {
    lapply(names(cs[[t]]), \(c) {
        ht <- glmQLFTest(fit[[t]], contrast = cs[[t]][[c]])
        tt <- topTags(ht, n = Inf)$table
        data.frame(row.names = NULL,
            gene = rownames(tt), tt,
            contrast = c, TumorType = t)
    }) |> do.call(what = rbind)
}) |> do.call(what = rbind)
rownames(res) <- NULL
```

## Visualization

### Volcano

```{r fig.width=6, fig.height=4}
#| label: plot-volcano
#| code-fold: true
ps <- lapply(typ, \(t) {
    df <- filter(res, TumorType == t, contrast == "TLS")
    .volcano(df, title = t, fdr = 1e-4, lfc = 1.25)
})
wrap_plots(ps, nrow = 1) + 
  plot_layout(guides = "collect") &
  theme(legend.position = "top")
```

### Heatmap

```{r}
#| label: plot-heatmap
#| code-fold: true
#| results: asis
top <- res %>%
    group_by(TumorType) %>%
    filter(FDR < 0.1, contrast == "TLS") %>% 
    slice_max(logFC, n = 40) %>% 
    group_split() %>% 
    setNames(names(grp))
for (t in names(top)) {
    cat("####", t, "\n")
    mtx <- logcounts(sub)[top[[t]]$gene, sub$TumorType == t]
    cd <- data.frame(colData(sub))[c("TissueSub")]
    hm <- pheatmap(mtx, 
        main = t, fontsize = 6,
        col = rev(hcl.colors(51, "RdBu")),
        scale = "row", show_colnames = FALSE, annotation_col = cd)
    print(hm); cat("\n\n")
}
```

### Boxplot

::: {.panel-tabset}

```{r fig.width=8, fig.height=5}
#| label: plot-boxplot
#| code-fold: true
#| fig-width: 8
#| fig-height: 5
#| results: asis
top <- res %>%
    group_by(TumorType) %>%
    filter(FDR < 0.05, contrast == "TLS") %>% 
    slice_max(logFC, n = 25) %>% 
    group_split() %>% 
    setNames(names(grp))
for (t in typ) {
    cat("####", t, "\n")
    plt <- ggplot(
        filter(gg, 
            TumorType == t,
            gene %in% top[[t]]$gene),
        aes(TissueSub, expr, fill = TissueSub)) +
        facet_wrap(~ gene, scales = "free_y") +
        geom_boxplot(size = 0.1, fill = NA, outlier.color = NA, show.legend = FALSE) + 
        geom_beeswarm(shape = 21, col = "black", stroke = 0.1, size = 1.2, alpha = 0.8) + 
        guides(fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +
        labs(x = NULL, y = "Expression (logCPM)") +
        scale_fill_brewer(palette = "Set2") +
        theme_linedraw(9) + theme(
            panel.grid = element_blank(),
            axis.text.x = element_blank(),
            axis.ticks.x = element_blank(),
            strip.background = element_blank(),
            legend.key.size = unit(0.5, "lines"),
            strip.text = element_text(color = "black", face = "bold"))
    print(plt); cat("\n\n")
}
```

:::

## Appendix

```{r}
#| label: save-data
saveRDS(res, file.path("..", "outs", "02-dge.rds"))
```

::: {.callout-note icon=false, collapse=true}

### Session info

```{r}
#| label: session-info
#| code-fold: false
sessionInfo()
```

:::